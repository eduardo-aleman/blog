[{"categories":["Blockchain","Infrastructure","Technology","Reference"],"content":"Important Note A Nano node stores the entire ledger of transactions. While the Nano team is experimenting with pruning (removing historical data to reduce disk space), the primary way to manage storage for a Nano node is by ensuring you have enough space available on your SSD-based hard drive.\nCurrent Storage Requirements Principal Representative Nodes (more than 0.1% of online voting weight): Require 400GB+ of free space on an SSD.\nNon-voting and Regular Representative Nodes: Also require 400GB+ of free space on an SSD.\nPruning (Experimental) Ledger pruning allows for the removal of blocks that are not account frontiers (the latest state of an account). The goal is to reduce the ledger size, but the pruning feature is currently experimental and not for production use. Pruning requires a full ledger to be bootstrapped initially. Pruned nodes can still serve as bootstrap servers for remaining blocks. Note that pruning is not available for voting nodes.\nConfiguration Nano node configuration is typically managed through TOML configuration files. Specific settings for disk space limits or pruning, if available, would be found within these configuration files.\nFor details on specific pruning parameters (like min-retain-blocks), you would consult the relevant documentation or configuration files (e.g., app.toml in some cases).\nIn summary, to manage hard drive limits for a Nano node, you primarily focus on providing sufficient SSD storage based on the recommended requirements. The experimental pruning feature is an ongoing development to reduce storage needs, but currently, it is not recommended for production nodes.\nü™ô Installing and Configuring Nano Node (V28.1) in Docker This document details the complete process of installing, configuring, and activating a Nano node as a representative, including importing an external wallet with seed.\n‚úÖ General information Node version: V28.1 Container: Docker (docker compose) Basic system: Ubuntu 24.04 (Noble) P2P port open: 7075 TCP/UDP Representative account: nano_ie9a... Wallet ID: 5D59... Seed: B9D32... Mnemonic (24 words): crash rabbit disease then daring nice park salad lamp bridge point human found tortoise paper nerve simple enjoy device add decorate trouble sister vast üê≥ Installing Docker and Docker Compose sudo apt update sudo apt install -and ca-certificates curl gnupg lsb-release # Clave GPG sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \\ sudo gpg --dearmor -the /etc/apt/keyrings/docker.gpg # Repository for Ubuntu 24.04 (noble) echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) \\ signed-by=/etc/apt/keyrings/docker.gpg] \\ https://download.docker.com/linux/ubuntu \\ noble stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null # Final installation sudo apt update sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin üì¶ Nano Container Configuration mkdir -p ~/nano-node-docker cd ~/nano-node-docker docker-compose.yml services: nano_node: image: nanocurrency/nano:V28.1 container_name: nano_node restart: unless-stopped ports: - \u0026#34;7075:7075/tcp\u0026#34; - \u0026#34;7075:7075/udp\u0026#34; volumes: - ./data:/root/Nano sudo docker compose up -d üîê Wallet and account import 1. Access the container sudo docker exec -it nano_node bash 2. Create wallet nano_node --wallet_create # Result: # 4D... 3. Import seed nano_node --wallet_change_seed \\ --wallet=4D... \\ --seed=P6AD... 4. Create a derivative account (from the seed) nano_node --account_create \\ --wallet=4D... # Result: # nano_7... üó≥Ô∏è Set up an account as a Representative nano_node --wallet_representative_set \\ --wallet=4D... \\ --account=nano_7... nano_node --account_representative_set \\ --account=nano_7... \\ --representative=nano_7... üíæ Manual backup of the wallets.ldb file cp ~/nano-node-docker/data/Nano/wallets.ldb ~/wallets-backup.ldb üß™ Node Verification sudo docker logs -f nano_node sudo docker exec -it nano_node bash nano_node --diagnostics üìå Notes -The imported wallet is fully functional within the node. -The account is already registered as a representative. -The filewallets.ldbcontains all the keys derived from the seed.\nAppendix: Manual verification of the Nano node ‚úÖ 1. Verify that the container is running sudo docker ps It should display a line like:\nnanocurrency/nano:V28.1 ... Up XX minutes ... nano_node ‚úÖ 2. View logs in real time sudo docker logs -f nano_node You should see:\n[monitor] [info] Blocks confirmed: ... [monitor] [info] Peers: ... ‚úÖ 3. Check connectivity and diagnostics sudo docker exec -it nano_node bash nano_node --diagnostics ‚úÖ 4. View number of blocks nano_node --debug_block_count ‚úÖ 5. View list of connected peers nano_node --debug_peers Expected output:\n[::ffff:178.33.122.56]:7075 [::ffff:51.81.243.15]:7075 üß≠ Manual Verification of the Nano Node Last updated: 2025-06-05 03:37:44\nManually verify that the node is up, without scripts or external monitoring.\nNo. Command What it checks Expected result 1 sudo docker ps That the container is running Line withnano_nodeand stateUp 2 sudo docker exec -it nano_node tail -n 20 /root/Nano/log/node.log That the node is generating recent logs Recent lines with activity (monitor, etc.) 3 sudo docker exec -it nano_node grep Peers /root/Nano/log/node.log | tail -n 1 That the node is connected to other nodes Something likePeers: 166 (inbound: 72 ...) üìù Recommendation Perform this review at least once a day if you don\u0026rsquo;t have automatic supervision.\nThese checks ensure that the node is: -‚úÖ Synchronized -‚úÖ Connected -‚úÖ Operational -‚úÖ Active on the Nano network\n‚ö†Ô∏è Disclaimer This guide was created to document practical commands to interact with a self-hosted Nano node via its JSON-RPC API. While its content has been carefully verified, its behavior is not guaranteed in all environments or custom configurations.\nUse these commands at your own risk. Always make backups before changing sensitive settings or handling private keys.\nFor issues or help, refer to the official Nano documentation or the community forums.\n","date":"2025-06-04T00:00:00Z","permalink":"http://localhost:1313/blog/en/posts/nano-node-v28.1/","summary":"\u003ch2 id=\"important-note\"\u003eImportant Note\u003c/h2\u003e\n\u003cp\u003eA Nano node stores the entire ledger of transactions. While the Nano team is experimenting with pruning (removing historical data to reduce disk space), the primary way to manage storage for a Nano node is by ensuring you have enough space available on your SSD-based hard drive.\u003c/p\u003e\n\u003ch2 id=\"current-storage-requirements\"\u003eCurrent Storage Requirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ePrincipal Representative Nodes (more than 0.1% of online voting weight): Require 400GB+ of free space on an SSD.\u003c/p\u003e","tags":["Nano","Cryptocurrencies","Node","Docker","Security","Ubuntu"],"title":"Installing Nano Node v28.1"},{"categories":null,"content":"Markup Languages: Differences, Uses, and Conversions Between XML, Markdown, and HTML Markup languages are essential for structuring, organizing, and rendering information in digital environments. The most commonly used are XML, Markdown, and HTML, each with distinct goals and characteristics. This article compares their main uses, conceptual and technical differences, and the common issues faced when converting between them.\n1. What is XML? XML (eXtensible Markup Language) is designed to store, transport, and structure data in a hierarchical and extensible format. Its syntax is strict, and it focuses on structure rather than presentation.\nCommon uses: Data exchange between heterogeneous systems. Structured representation of information (legal texts, books, configurations). Foundation for derived languages like TEI, MathML, SVG, RSS. \u0026lt;book\u0026gt; \u0026lt;title\u0026gt;Don Quixote\u0026lt;/title\u0026gt; \u0026lt;author\u0026gt;Miguel de Cervantes\u0026lt;/author\u0026gt; \u0026lt;year\u0026gt;1605\u0026lt;/year\u0026gt; \u0026lt;/book\u0026gt; XML and the TEI Standard One of the most sophisticated uses of XML is in the TEI (Text Encoding Initiative) standard. TEI defines a comprehensive tag set to represent literary, historical, or philosophical texts with rich metadata and deep hierarchical structure.\nCommon applications of TEI:\nCritical editions of classical works. Digitization of manuscripts and historical archives. Digital humanities and computational philology projects. TEI Example:\n\u0026lt;TEI xmlns=\u0026#34;http://www.tei-c.org/ns/1.0\u0026#34;\u0026gt; \u0026lt;teiHeader\u0026gt; \u0026lt;fileDesc\u0026gt; \u0026lt;titleStmt\u0026gt; \u0026lt;title\u0026gt;Don Quixote\u0026lt;/title\u0026gt; \u0026lt;author\u0026gt;Miguel de Cervantes\u0026lt;/author\u0026gt; \u0026lt;/titleStmt\u0026gt; \u0026lt;publicationStmt\u0026gt; \u0026lt;publisher\u0026gt;Digital Library Project\u0026lt;/publisher\u0026gt; \u0026lt;/publicationStmt\u0026gt; \u0026lt;/fileDesc\u0026gt; \u0026lt;/teiHeader\u0026gt; \u0026lt;text\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;In a village of La Mancha...\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/text\u0026gt; \u0026lt;/TEI\u0026gt; 2. What is Markdown? Markdown is a lightweight markup language designed to be easy to write and read in plain text. It enables simple conversion to HTML without requiring complex tags.\nCommon uses: Rapid content creation for blogs, forums, technical documentation. Static site generation (Hugo, Jekyll). Academic note-taking and collaborative editing. # Don Quixote **Author:** Miguel de Cervantes *Year:* 1605 CommonMark and Pandoc Extensions Markdown is not a single standard: multiple variants exist. CommonMark is a formal specification that aims to unify them. Tools like Pandoc extend Markdown with advanced features such as footnotes, citations, LaTeX equations, and export to multiple formats.\nAdvantages of using Pandoc:\nConvert to PDF, HTML, DOCX, LaTeX, EPUB, XML, etc. Supports .bib bibliographies, CSL citations, footnotes. Lua/JSON filters for document transformation. Extended syntax example:\n[^1]: Footnote with bibliographic reference. \u0026gt; Blockquote with author: \u0026gt; ‚Äî Aristotle, *Nicomachean Ethics* 3. What is HTML? HTML (HyperText Markup Language) is the standard for web pages. It defines the structure and presentation of content for browsers, including text, images, links, forms, and multimedia.\nCommon uses: Web development. Content rendering in browsers. Frontend structure (enhanced by CSS and JavaScript). \u0026lt;h1\u0026gt;Don Quixote\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Author:\u0026lt;/strong\u0026gt; Miguel de Cervantes\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;em\u0026gt;Year:\u0026lt;/em\u0026gt; 1605\u0026lt;/p\u0026gt; HTML5 and the Shift from XHTML HTML5 is the modern version of the language, focused on semantics, accessibility, and multimedia support. Unlike XHTML, which follows XML\u0026rsquo;s strict rules, HTML5 is forgiving and browser-friendly.\nKey differences between HTML5 and XHTML:\nHTML5 allows unclosed tags (\u0026lt;br\u0026gt;, \u0026lt;img\u0026gt;) and unquoted attributes. XHTML requires well-formed XML. HTML5 introduces semantic tags like \u0026lt;section\u0026gt;, \u0026lt;article\u0026gt;, \u0026lt;nav\u0026gt;, \u0026lt;aside\u0026gt;. HTML5 Example:\n\u0026lt;article\u0026gt; \u0026lt;h2\u0026gt;Blog Entry\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Published on \u0026lt;time datetime=\u0026#34;2025-06-02\u0026#34;\u0026gt;June 2025\u0026lt;/time\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; 4. Key Differences Feature XML Markdown HTML Main purpose Structured data storage Lightweight text writing Web content presentation Syntax Strict, hierarchical Informal, minimalistic Structured, visual Nesting capability Fully nested Limited Fully nested Formal standard W3C, strict compliance Informal, extensible W3C-compliant Human readability Medium High Low to medium Extensibility High (custom tags allowed) Limited Moderate 5. Conversion Challenges Markdown ‚Üí HTML ‚úÖ Well-supported with many tools\n‚ö†Ô∏è Loses complex structures, inconsistent extensions\nHTML ‚Üí Markdown ‚úÖ Possible with tools like Pandoc\n‚ö†Ô∏è Attributes, classes, and some structures may be lost\nXML ‚Üí HTML ‚úÖ Feasible with XSLT or custom scripts\n‚ö†Ô∏è Requires semantic mapping from XML to HTML\nHTML ‚Üí XML ‚úÖ Only if well-formed (XHTML)\n‚ö†Ô∏è Most HTML needs cleanup to be valid XML\nMarkdown ‚Üí XML ‚úÖ Possible via adapters\n‚ö†Ô∏è Markdown lacks explicit hierarchy and metadata\nXML ‚Üí Markdown ‚ö†Ô∏è Difficult\nRich XML structures don\u0026rsquo;t translate to flat Markdown Needs extraction rules and simplification 6. Conclusion While XML, Markdown, and HTML are all markup languages, their design and goals differ:\nXML prioritizes structure and validation. Markdown emphasizes simplicity and readability. HTML focuses on web presentation. Converting between them often involves trade-offs, structure loss, or intermediate tools. In digital humanities or structured publishing workflows, it\u0026rsquo;s essential to choose the right format based on whether the goal is rapid writing (Markdown), web display (HTML), or long-term preservation (XML).\n","date":"2025-06-02T00:00:00Z","permalink":"http://localhost:1313/blog/en/posts/xml-markdown-html/","summary":"\u003ch1 id=\"markup-languages-differences-uses-and-conversions-between-xml-markdown-and-html\"\u003eMarkup Languages: Differences, Uses, and Conversions Between XML, Markdown, and HTML\u003c/h1\u003e\n\u003cp\u003eMarkup languages are essential for structuring, organizing, and rendering information in digital environments. The most commonly used are \u003cstrong\u003eXML\u003c/strong\u003e, \u003cstrong\u003eMarkdown\u003c/strong\u003e, and \u003cstrong\u003eHTML\u003c/strong\u003e, each with distinct goals and characteristics. This article compares their main uses, conceptual and technical differences, and the common issues faced when converting between them.\u003c/p\u003e\n\u003ch2 id=\"1-what-is-xml\"\u003e1. What is XML?\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eXML (eXtensible Markup Language)\u003c/strong\u003e is designed to store, transport, and structure data in a hierarchical and extensible format. Its syntax is strict, and it focuses on structure rather than presentation.\u003c/p\u003e","tags":["XML","Markdown","HTML","Conversions","Digital Humanities"],"title":"Differences Between XML, Markdown, and HTML: Uses and Conversion Challenges"},{"categories":["Technology","Reference"],"content":"Hardening an Ubuntu server is a critical practice to protect any infrastructure exposed to the internet. Below are key steps to strengthen security, including a summary table of each configuration and its effect.\nüîê Step 1: Create a secure user and use SSH keys Disabling direct access to the root user and using a limited user with SSH keys improves traceability and removes one of the most common attack vectors.\nadduser secureuser usermod -aG sudo secureuser Then, copy your public key to the server:\nssh-copy-id secureuser@your-server üîê Step 2: Disable SSH access for root Edit the file /etc/ssh/sshd_config:\nPermitRootLogin no üîê Step 3: Disable password authentication To enforce the use of SSH keys:\nPasswordAuthentication no Remember to restart the service:\nsudo systemctl restart ssh üîÅ Step 4: Set up automatic security updates Install and configure:\nsudo apt install unattended-upgrades sudo dpkg-reconfigure --priority=low unattended-upgrades This ensures your system receives security patches without manual intervention.\nüì¶ Step 5: Install fail2ban Fail2ban blocks IPs that perform brute-force attacks on services like SSH:\nsudo apt install fail2ban sudo systemctl enable --now fail2ban For a basic SSH jail:\n# /etc/fail2ban/jail.local [sshd] enabled = true üîÑ Step 6: Configure reverse SSH ProxyJump (bastion) From your local machine (e.g., your Mac), configure ~/.ssh/config to access a private server through a bastion host:\nHost private-node HostName 10.0.0.3 User secureuser ProxyJump bastion Host bastion HostName 123.456.789.000 User secureuser üìä Step 7: Monitoring with Uptime Kuma Uptime Kuma is a modern web-based uptime monitoring tool:\ndocker run -d --restart=always -p 3001:3001 \\ -v uptime-kuma:/app/data --name uptime kuma uptimekuma/uptime-kuma Access it via http://your-ip:3001 to configure.\nüìú Step 8: SSH key rotation script Create a script at /usr/local/bin/rotate_ssh.sh:\n#!/bin/bash USER=\u0026#34;secureuser\u0026#34; KEY_DIR=\u0026#34;/home/$USER/.ssh\u0026#34; NEW_KEY=\u0026#34;$KEY_DIR/id_ed25519_new\u0026#34; ssh-keygen -t ed25519 -f \u0026#34;$NEW_KEY\u0026#34; -N \u0026#34;\u0026#34; cat \u0026#34;$NEW_KEY.pub\u0026#34; \u0026gt;\u0026gt; \u0026#34;$KEY_DIR/authorized_keys\u0026#34; echo \u0026#34;New key added. Manually remove the old one after verifying access.\u0026#34; üîê Step 9: Enable Two-Factor Authentication (2FA) with Google Authenticator sudo apt install libpam-google-authenticator google-authenticator Then edit /etc/pam.d/sshd and add at the top:\nauth required pam_google_authenticator.so And in /etc/ssh/sshd_config:\nChallengeResponseAuthentication yes Restart the service:\nsudo systemctl restart ssh Summary Step Effect secureuser + SSH keys Replaces direct root access PermitRootLogin no Prevents attacks on the root account PasswordAuthentication no Enforces key-based authentication only UFW Restricts accessible ports SSH timeout \u0026amp; retries Mitigates slow brute-force attacks Fail2ban Auto-blocks failed login attempts ProxyJump Secure SSH via restricted bastion access Automatic updates Patches vulnerabilities without manual effort Uptime Kuma Visual monitoring of services SSH key rotation Improves credential hygiene Google Authenticator Adds a second authentication factor With these steps, you\u0026rsquo;ll have a solid baseline for a secure and maintainable server. For even greater protection, consider integrating audit tools like Lynis, internal port scanning, and network segmentation.\n","date":"2025-05-29T00:00:00Z","permalink":"http://localhost:1313/blog/en/posts/ubuntu-server-hardening/","summary":"\u003cp\u003eHardening an Ubuntu server is a critical practice to protect any infrastructure exposed to the internet. Below are key steps to strengthen security, including a summary table of each configuration and its effect.\u003c/p\u003e\n\u003ch2 id=\"-step-1-create-a-secure-user-and-use-ssh-keys\"\u003eüîê Step 1: Create a secure user and use SSH keys\u003c/h2\u003e\n\u003cp\u003eDisabling direct access to the \u003ccode\u003eroot\u003c/code\u003e user and using a limited user with SSH keys improves traceability and removes one of the most common attack vectors.\u003c/p\u003e","tags":["SSH","UFW","Fail2Ban","Linux","Servers","Ubuntu","Security"],"title":"Hardening an Ubuntu Server: Essential Steps"}]